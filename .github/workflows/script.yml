name: Run Scripts and Deploy

on:
  push:
    branches:
      - stage2
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'stage'
        type: choice
        options:
          - stage
          - prod

jobs:
  run-scripts:
    name: Run Configuration Scripts
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'stage' }}
    strategy:
      matrix:
        node-version: ['22']
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      
      # - name: Cache node modules
      #   id: cache-npm
      #   uses: actions/cache@v4
      #   env:
      #     cache-name: cache-node-modules
      #   with:
      #     path: |
      #       ~/.npm
      #       node_modules
      #     key: ${{ runner.os }}-${{ env.cache-name }}-scripts-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-${{ env.cache-name }}-scripts-
      #       ${{ runner.os }}-${{ env.cache-name }}-
      
      # - name: Cache run scripts results
      #   id: cache-scripts
      #   uses: actions/cache@v4
      #   env:
      #     cache-name: cache-run-scripts
      #   with:
      #     path: |
      #       .scripts-cache
      #     key: ${{ runner.os }}-${{ env.cache-name }}-${{ (github.event_name == 'workflow_dispatch' && inputs.environment == 'prod') && 'prod' || 'stage' }}-${{ hashFiles('scripts/**', 'package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-${{ env.cache-name }}-${{ (github.event_name == 'workflow_dispatch' && inputs.environment == 'prod') && 'prod' || 'stage' }}-
      
      # - name: Install Dependencies
      #   if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
      #   run: |
      #     npm ci --prefer-offline
      #     npm list --depth=0
      
      - name: Skip Scripts (Cache Hit)
        if: ${{ steps.cache-scripts.outputs.cache-hit == 'true' }}
        run: |
          echo "Scripts already completed - skipping due to cache hit"
          cat .scripts-cache/completed.txt || echo "Cache marker found"
      
      - name: Run Scripts
        if: ${{ steps.cache-scripts.outputs.cache-hit != 'true' }}
        run: |
          npm run create-shipping-carriers
          npm run create-payment-methods
          # Create cache marker file
          mkdir -p .scripts-cache
          echo "Scripts completed at $(date)" > .scripts-cache/completed.txt
        env:
          # Use existing _STAGE/_PROD suffixed secrets
          OAUTH_CLIENT_ID: ${{ (github.event_name == 'workflow_dispatch' && inputs.environment == 'prod') && secrets.OAUTH_CLIENT_ID_PROD || secrets.CLIENTID_STAGE }}
          OAUTH_CLIENT_SECRETS: ${{ (github.event_name == 'workflow_dispatch' && inputs.environment == 'prod') && secrets.OAUTH_CLIENT_SECRETS_PROD || secrets.OAUTH_CLIENT_SECRETS_STAGE }}
          OAUTH_TECHNICAL_ACCOUNT_ID: ${{ (github.event_name == 'workflow_dispatch' && inputs.environment == 'prod') && secrets.OAUTH_TECHNICAL_ACCOUNT_ID_PROD || secrets.TECHNICALACCID_STAGE }}
          OAUTH_TECHNICAL_ACCOUNT_EMAIL: ${{ (github.event_name == 'workflow_dispatch' && inputs.environment == 'prod') && secrets.OAUTH_TECHNICAL_ACCOUNT_EMAIL_PROD || secrets.TECHNICALACCEMAIL_STAGE }}
          OAUTH_IMS_ORG_ID: ${{ (github.event_name == 'workflow_dispatch' && inputs.environment == 'prod') && secrets.OAUTH_IMS_ORG_ID_PROD || secrets.AIO_PROJECT_IMS_ORG_ID_STAGE }}
          OAUTH_SCOPES: ${{ (github.event_name == 'workflow_dispatch' && inputs.environment == 'prod') && secrets.OAUTH_SCOPES_PROD || secrets.OAUTH_SCOPES_STAGE }}
          AIO_CLI_ENV: ${{ (github.event_name == 'workflow_dispatch' && inputs.environment == 'prod') && vars.AIO_CLI_ENV_PROD || 'prod' }}
          COMMERCE_BASE_URL: ${{ (github.event_name == 'workflow_dispatch' && inputs.environment == 'prod') && secrets.COMMERCE_BASE_URL_PROD || secrets.COMMERCE_BASE_URL_STAGE }}
  deploy:
    name: Trigger Deployment
    needs: run-scripts
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    permissions:
      actions: write
      contents: read
    steps:
      - name: Trigger Stage Deployment
        if: ${{ inputs.environment == 'stage' }}
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deploy-stage.yml',
              ref: 'stage'
            });
            console.log('Triggered stage deployment workflow');

      - name: Trigger Production Deployment
        if: ${{ inputs.environment == 'prod' }}
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deploy-prod.yml',
              ref: 'prod'
            });
            console.log('Triggered production deployment workflow');

  ask-for-deployment:
    name: Request Deployment Environment
    needs: run-scripts
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Manual Deployment Required
        run: |
          echo "Scripts completed successfully!"
          echo "To deploy, manually trigger this workflow with:"
          echo "- Go to Actions tab"
          echo "- Select 'Run Scripts and Deploy' workflow"
          echo "- Click 'Run workflow'"
          echo "- Choose environment: stage or prod"
          echo "- Click 'Run workflow' button"
